using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ServiceGenerator {
    [Generator]
    public class EntityFactoryShortcutsGenerator : IIncrementalGenerator {
        public void Initialize(IncrementalGeneratorInitializationContext context) {
            // Create a provider to filter structs annotated with the [EntityFactory] attribute
            IncrementalValuesProvider<(StructDeclarationSyntax structDeclaration, string Name, string Namespace)> provider = context.SyntaxProvider
                .CreateSyntaxProvider(
                    (s, _) => s is StructDeclarationSyntax,
                    (ctx, _) => GetStructDeclarationForSourceGen(ctx))
                .Where(t => t.foundAttribute)
                .Select((t, _) => t.data);

            // Combine all results into a single collection
            IncrementalValueProvider<ImmutableArray<(StructDeclarationSyntax structDeclaration, string Name, string Namespace)>> combinedProvider = provider.Collect();

            // Generate the source code.
            context.RegisterSourceOutput(combinedProvider, GenerateCode);
        }

        private static ((StructDeclarationSyntax structDeclaration, string Name, string Namespace) data, bool foundAttribute) GetStructDeclarationForSourceGen(GeneratorSyntaxContext context) {
            StructDeclarationSyntax structDeclarationSyntax = (StructDeclarationSyntax)context.Node;

            // Iterate over attributes in the struct
            foreach (AttributeSyntax attributeSyntax in structDeclarationSyntax.AttributeLists.SelectMany(attributeList => attributeList.Attributes)) {
                if (context.SemanticModel.GetSymbolInfo(attributeSyntax).Symbol is not IMethodSymbol attributeSymbol) continue;

                if (attributeSymbol.ContainingType.ToDisplayString() != "Commons.Architectures.EntityFactory") continue;

                string name = structDeclarationSyntax.Identifier.Text;
                string namespaceName = (structDeclarationSyntax.Parent as NamespaceDeclarationSyntax)?.Name.ToString() ?? "UnknownNamespace";

                return ((structDeclarationSyntax, name, namespaceName), true);
            }

            return ((structDeclarationSyntax, string.Empty, string.Empty), false);
        }


        private static void GenerateCode(SourceProductionContext context, ImmutableArray<(StructDeclarationSyntax structDeclaration, string Name, string Namespace)> structs) {
            if (structs.IsDefaultOrEmpty)
                return;

            // Filter valid entries
            List<(StructDeclarationSyntax structDeclaration, string Name, string Namespace)> validStructs = structs.Where(s => !string.IsNullOrEmpty(s.Name)).ToList();

            if (!validStructs.Any())
                return;

            using MemoryStream sourceStream = new();
            using StreamWriter sourceStreamWriter = new(sourceStream, Encoding.UTF8);
            using IndentedTextWriter codeWriter = new(sourceStreamWriter);

            // Add partial code 
            codeWriter.WriteLine("// <auto-generated/>");
            codeWriter.WriteLine("using Unity.Burst;");
            codeWriter.WriteLine("using Unity.Entities;");
            foreach (string namesSpace in validStructs.Select(s => s.Namespace).Distinct()) {
                codeWriter.WriteLine($"using {namesSpace};");
            }
            
            codeWriter.WriteLine("namespace Commons.Architectures {");
            // open namespace
            codeWriter.Indent++;
            codeWriter.WriteLine("public static class EntityFactoriesStatics {");
            
            // open class
            codeWriter.Indent++;
            codeWriter.WriteLine("public abstract class StaticFieldKey { }");
            
            foreach ((StructDeclarationSyntax structDeclaration, string Name, string Namespace) vStruct in validStructs) {
                codeWriter.WriteLine($"public static readonly SharedStatic<{vStruct.Name}> {vStruct.Name} = SharedStatic<{vStruct.Name}>.GetOrCreate<{vStruct.Name}, StaticFieldKey>();");
            }
             // close class
            codeWriter.Indent--;
            codeWriter.WriteLine("}");

            codeWriter.WriteLine("public static class EntityFactories {");
            // open static
            codeWriter.Indent++;
            codeWriter.WriteLine("// Call this to access data in the factories ");
            foreach ((StructDeclarationSyntax structDeclaration, string Name, string Namespace) vStruct in validStructs) {
                codeWriter.WriteLine($"public static ref {vStruct.Name} {vStruct.Name} => ref EntityFactoriesStatics.{vStruct.Name}.Data;");
            }
            codeWriter.WriteLine("// Call this to setup the factories");
            foreach ((StructDeclarationSyntax structDeclaration, string Name, string Namespace) vStruct in validStructs) {
                codeWriter.WriteLine($"public static {vStruct.Name} {vStruct.Name}Setup(ref SystemState state) => EntityFactoriesStatics.{vStruct.Name}.Data = new {vStruct.Name}().Setup(ref state);");
            }
            // close static
            codeWriter.Indent--;
            codeWriter.WriteLine("}");
            // close namespace
            codeWriter.Indent--;
            codeWriter.WriteLine("}");

            sourceStreamWriter.Flush();

            context.AddSource($"EntityFactoryShortcuts.g.cs", SourceText.From(sourceStream, Encoding.UTF8, canBeEmbedded: true));
        }
    }
}