using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ServiceGenerator {
    [Generator]
    public class ServiceBaseGenerator : IIncrementalGenerator {
        public void Initialize(IncrementalGeneratorInitializationContext context) {
            // Create a provider to filter structs annotated with the [EntityFactory] attribute
            IncrementalValuesProvider<((ClassDeclarationSyntax, List<string> services, List<UsingDirectiveSyntax> usings), bool reportInterfaceImplemented)> provider = context.SyntaxProvider
                .CreateSyntaxProvider(
                    (s, _) => s is ClassDeclarationSyntax,
                    (ctx, _) => GetClassDeclarationForSourceGen(ctx))
                .Where(t => t.reportInterfaceImplemented)
                .Select((t, _) => t);

            // Register the source code generation for all collected structs
            context.RegisterSourceOutput(provider, GenerateCode);
        }

        private static ((ClassDeclarationSyntax, List<string> services, List<UsingDirectiveSyntax> usings), bool reportInterfaceImplemented) GetClassDeclarationForSourceGen(GeneratorSyntaxContext context) {
            // Cast the node to StructDeclarationSyntax
            ClassDeclarationSyntax classDeclarationSyntax = (ClassDeclarationSyntax)context.Node;
            List<string> services = new();
            List<UsingDirectiveSyntax> usings = new();

            // Extract using directives
            CompilationUnitSyntax root = (CompilationUnitSyntax)classDeclarationSyntax.SyntaxTree.GetRoot();
            usings.AddRange(root.Usings);

            // Iterate over attributes in the struct
            if (classDeclarationSyntax.BaseList != null) {
                foreach (var baseType in classDeclarationSyntax.BaseList.Types) {
                    if (context.SemanticModel.GetTypeInfo(baseType.Type).Type?.ToDisplayString() == "Commons.Services.IServiceBase") {
                        // Add the class name
                        services.Add(classDeclarationSyntax.Identifier.Text);
                        return ((classDeclarationSyntax, services, usings), true);
                    }
                }
            }

            // Return the struct and indicate the attribute was not found
            return ((classDeclarationSyntax, services, usings), false);
        }

        public static void GenerateCode(SourceProductionContext context, ((ClassDeclarationSyntax structDeclaration, List<string> services, List<UsingDirectiveSyntax> usings) data, bool _) input) {
            var services = input.data.services;
            List<UsingDirectiveSyntax> usings = input.data.usings;

            // Go through all filtered class declarations.
            MemoryStream sourceStream = new();
            StreamWriter sourceStreamWriter = new(sourceStream, Encoding.UTF8);
            IndentedTextWriter codeWriter = new(sourceStreamWriter);

            codeWriter.WriteLine("// <auto-generated/>");
            codeWriter.WriteLine("using Commons.Services;");
            
            foreach (UsingDirectiveSyntax usingDirective in usings)
            {
                codeWriter.WriteLine(usingDirective.ToString());
            }

            codeWriter.WriteLine("namespace Commons.Architectures {");
            codeWriter.Indent++;

            codeWriter.WriteLine("public static partial class ManagedSettings {");
            codeWriter.Indent++;

            foreach (var service in services) {
                codeWriter.WriteLine($"public static {service} {service} =>  ServiceLocator.Current.Get<{service}>();");
            }
            codeWriter.Indent--;
            codeWriter.WriteLine("}");
            codeWriter.Indent--;
            codeWriter.WriteLine("}");

            sourceStreamWriter.Flush();

            context.AddSource($"ServicesShortcuts.g.cs", SourceText.From(sourceStream, Encoding.UTF8, canBeEmbedded: true));
        }
    }
}