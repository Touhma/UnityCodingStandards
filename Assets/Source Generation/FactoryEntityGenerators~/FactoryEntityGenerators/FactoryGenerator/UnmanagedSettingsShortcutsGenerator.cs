using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ServiceGenerator {
    [Generator]
    public class UnmanagedSettingsShortcutsGenerator : IIncrementalGenerator {
        public void Initialize(IncrementalGeneratorInitializationContext context) {
            // Create a provider to filter structs annotated with the [EntityFactory] attribute
            IncrementalValuesProvider<((StructDeclarationSyntax, List<string> Names, List<string>NamesSpaces), bool reportInterfaceImplemented)> provider = context.SyntaxProvider
                .CreateSyntaxProvider(
                    (s, _) => s is StructDeclarationSyntax,
                    (ctx, _) => GetStructDeclarationForSourceGen(ctx))
                .Where(t => t.reportAttributeFound)
                .Select((t, _) => t);

            // Generate the source code.
            context.RegisterSourceOutput(provider, GenerateCode);
        }

        private static ((StructDeclarationSyntax, List<string> Names, List<string>NamesSpaces), bool reportAttributeFound) GetStructDeclarationForSourceGen(GeneratorSyntaxContext context) {
            // Cast the node to StructDeclarationSyntax
            StructDeclarationSyntax structDeclarationSyntax = (StructDeclarationSyntax)context.Node;
            List<string> names = new();
            List<string> namesSpaces = new();

            // Iterate over attributes in the struct
            foreach (AttributeSyntax attributeSyntax in structDeclarationSyntax.AttributeLists.SelectMany(attributeList => attributeList.Attributes)) {
                // Get the symbol information for the attribute
                if (context.SemanticModel.GetSymbolInfo(attributeSyntax).Symbol is not IMethodSymbol attributeSymbol) continue;

                // Check if the attribute is [UnmanagedSetting]
                if (attributeSymbol.ContainingType.ToDisplayString() != "Commons.Architectures.UnmanagedSetting") continue;
                // Add the factory name
                names.Add(structDeclarationSyntax.Identifier.Text);

                NamespaceDeclarationSyntax namespaceDeclaration = structDeclarationSyntax.Parent as NamespaceDeclarationSyntax;
                namesSpaces.Add(namespaceDeclaration?.Name.ToString() ?? "UnknownNamespace");

                return ((structDeclarationSyntax, names, namesSpaces), true);
            }

            // Return the struct and indicate the attribute was not found
            return ((structDeclarationSyntax, names, namesSpaces), false);
        }

        public static void GenerateCode(SourceProductionContext context, ((StructDeclarationSyntax structDeclaration, List<string> Names, List<string>NamesSpaces) data, bool _) input) {
            List<string> names = input.data.Names;
            List<string> namesSpaces = input.data.NamesSpaces;

            // Go through all filtered class declarations.
            MemoryStream sourceStream = new();
            StreamWriter sourceStreamWriter = new(sourceStream, Encoding.UTF8);
            IndentedTextWriter codeWriter = new(sourceStreamWriter);

            codeWriter.WriteLine("// <auto-generated/>");
            codeWriter.WriteLine("using Unity.Burst;");

            foreach (string namesSpace in namesSpaces) {
                codeWriter.WriteLine($"using {namesSpace};");
            }

            codeWriter.WriteLine("namespace Commons.Architectures {");
            codeWriter.Indent++;

            codeWriter.WriteLine("public static class UnmanagedSettingsStatics {");
            codeWriter.Indent++;
            codeWriter.WriteLine("public abstract class StaticFieldKey { }");
            
            foreach (string name in names) {
                codeWriter.WriteLine($"public static readonly SharedStatic<{name}> {name} = SharedStatic<{name}>.GetOrCreate<{name}, StaticFieldKey>();");
            }

            codeWriter.Indent--;
            codeWriter.WriteLine("}");


            codeWriter.WriteLine("public static class UnmanagedSettings {");
            codeWriter.Indent++;

            foreach (string name in names) {
                codeWriter.WriteLine($"public static {name} {name} => UnmanagedSettingsStatics.{name}.Data;");
            }
            
            codeWriter.Indent--;
            codeWriter.WriteLine("}");
            codeWriter.Indent--;
            codeWriter.WriteLine("}");

            sourceStreamWriter.Flush();

            context.AddSource($"ManagedSettingsShortcuts.g.cs", SourceText.From(sourceStream, Encoding.UTF8, canBeEmbedded: true));
        }
    }
}